import requests
import pandas as pd
from datetime import datetime 
import plotly.graph_objects as go 
from plotly.subplots import make_subplots 

def candle(row):
    if row['close'] > row['open']:
        return 1
    elif row['close'] < row['open']:
        return -1
    else:
        return 0

def convert_timestamp(timestamp):
    """Convert a human-readable timestamp to milliseconds."""
    return int(pd.to_datetime(timestamp).timestamp() * 1000)

def fetch_binance_data(symbol, startTime=None):
    """Fetch 1-minute Kline data from Binance API."""
    df = pd.DataFrame()
    
    if startTime:
        startTime = convert_timestamp(startTime)
        
        
        while True:
            url = f"https://fapi.binance.com/fapi/v1/indexPriceKlines?pair={symbol}&interval=1m&limit=1500&startTime={startTime}"
            # print(url)
            response = requests.get(url)
            if response.status_code == 200:
                data = response.json()
                startTime = data[-1][6] + 1  # 更新 startTime 为下一个时间段
                temp = pd.DataFrame(data)
                df = pd.concat([df, temp], ignore_index=True)
                if len(data) < 1500:
                    break
            else:
                raise Exception(f"Error fetching data: {response.status_code}, {response.text}")
    else:
        url = f"https://fapi.binance.com/fapi/v1/indexPriceKlines?pair={symbol}&interval=1m&limit=1500"
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            df = pd.DataFrame(data)
        else:
            raise Exception(f"Error fetching data: {response.status_code}, {response.text}")
    
    # 定义 DataFrame 列
    df.columns = [
        'time', 'open', 'high', 'low', 'close', 'volume',
        'close_time', 'quote_asset_volume', 'number_of_trades',
        'taker_buy_base', 'taker_buy_quote', 'ignore'
    ]
    df['time'] = pd.to_datetime(df['time'], unit='ms')
    df.set_index('time', inplace=True)
    df = df[['open', 'high', 'low', 'close']].astype(float)
    
    # 定义 candle 列
    def candle(row):
        return 1 if row['close'] > row['open'] else -1

    df['candle'] = df.apply(candle, axis=1)
    
    # 计算连续上涨或下跌的次数
    df['count'] = (df['candle'] != df['candle'].shift()).cumsum()
    df['count'] = df.groupby('count').cumcount() + 1
    
    return df

principal = 10000

def backtest_strategy(data, principal=principal, order_size=500, return_rate=0.8, hold_minutes=10,consecutive_candles=5):
    """Run the backtest based on the given strategy."""
    signals = []  # 保存交易信号
    balance = principal  # 初始本金
    
    for i in range(len(data) - hold_minutes):
        # 当前行的 candle 和 count 值
        candle = data['candle'].iloc[i]
        count = data['count'].iloc[i]
        
        # 触发条件：SELL
        if candle == 1 and count == consecutive_candles:
            open_time = data.index[i]
            entry_price = data['close'].iloc[i]  # 卖出价格
            close_price = data['close'].iloc[i + hold_minutes]  # 10 分钟后买入平仓价格
            result = "WIN" if close_price < entry_price else "LOSS"  # 比较价格
            profit_or_loss = order_size * return_rate if result == "WIN" else -order_size
            balance += profit_or_loss
            signals.append({
                "type": "SHORT",
                'open_time': open_time,
                "entry_price": entry_price,
                "close_price": close_price,
                "result": result,
                "balance": balance
            })
        
        # 触发条件：BUY
        elif candle == -1 and count == consecutive_candles:
            open_time = data.index[i]
            entry_price = data['close'].iloc[i]  # 买入价格
            close_price = data['close'].iloc[i + hold_minutes]  # 10 分钟后卖出平仓价格
            result = "WIN" if close_price > entry_price else "LOSS"  # 比较价格
            profit_or_loss = order_size * return_rate if result == "WIN" else -order_size
            balance += profit_or_loss
            signals.append({
                "type": "LONG",
                'open_time': open_time,
                "entry_price": entry_price,
                "close_price": close_price,
                "result": result,
                "balance": balance
            })
    
    return signals, balance



# if __name__ == "__main__":


# 获取 K 线数据
print("Fetching data from Binance...")
kline_data = fetch_binance_data('BTCUSDT','2025-01-24 00:00:00')

# 回测策略
print("Running backtest...")
signals, final_balance = backtest_strategy(kline_data)

# 打印结果
print(f"Initial Balance: {principal}")
print(f"Final Balance: {final_balance}")
# for signal in signals[:]:  # 打印前 10 个交易信号
#     print(signal)
df = pd.DataFrame(signals)
df.insert(3,'close_time',df['open_time']+pd.Timedelta(minutes=10))
ret = df.value_counts(subset='result').to_dict()
ret['win_ratio'] = round(ret['WIN']/(ret['WIN']+ret['LOSS']),4)
ret['count']  = ret['WIN']+ret['LOSS']
df['win_ratio'] = df.apply(lambda x:1 if x['result']=='WIN' else 0,axis=1).cumsum() / (df.index+1)

def pnl(row,order_size=500,return_rate=0.8):
    if row['result'] == 'WIN':
        return order_size * return_rate
    else:
        return -order_size
    
df['pnl'] = df.apply(pnl,axis=1)

print(ret)

# df.plot(x='open_time',y='balance',title='Balance Curve',ylabel='Balance',xlabel='Time',figsize=(10,6))
# df.plot(y='win_ratio',title='Win Ratio Curve',ylabel='Win Ratio',xlabel='Time',figsize=(10,6))



fig = make_subplots(
    rows=3,cols=1,
    shared_xaxes=True,
    specs=[[{'secondary_y':False}],[{'secondary_y':True}],[{'secondary_y':True}]],
    vertical_spacing=0.1,
    row_heights= [0.2,0.6,0.2],
    subplot_titles=["Balance Curve", "Candlestick Chart with PnL", "Win Ratio and Trade Count"]
    )
    # subplot_titles=('Balance Curve','Win Ratio Curve'))
    
fig.add_trace(go.Scatter(x=df['open_time'],y=df['balance'],name='Balance',mode='lines+markers',marker=dict(symbol='diamond'),line=dict(color='lightblue')),row=1,col=1)

fig.add_trace( 
              go.Candlestick( 
                             x=kline_data.index,
                                open=kline_data['open'],
                                high=kline_data['high'],
                                low=kline_data['low'],
                                close=kline_data['close'],          
                             ),row=2,col=1
              )

long = df[df['type']=='LONG']
short = df[df['type']=='SHORT'] 
win = df[df['result']=='WIN']
loss = df[df['result']=='LOSS']

fig.add_trace(go.Scatter( 
                       x=long['open_time'],y=long['entry_price'],name='LONG',mode='markers',marker=dict(color='green',size=10,symbol='triangle-up')
                         ),row=2,col=1)

fig.add_trace(go.Scatter( 
                       x=short['open_time'],y=short['entry_price'],name='LONG',mode='markers',marker=dict(color='red',size=10,symbol='triangle-down')
                         ),row=2,col=1)

fig.add_trace(go.Bar(x=win['open_time'],y=win['pnl'],name='WIN',marker=dict(color='green',opacity=0.5)),row=2,col=1,secondary_y=True)
fig.add_trace(go.Bar(x=loss['open_time'],y=loss['pnl'],name='LOSS',marker=dict(color='red',opacity=0.5)),row=2,col=1,secondary_y=True)

fig.add_trace(go.Scatter(x=df['open_time'],y=df['win_ratio'],name='Win Ratio',mode='lines+markers',marker=dict(symbol='diamond'),line=dict(color='red')),row=3,col=1,secondary_y=True)
fig.add_trace(go.Scatter(x=df['open_time'],y=df.index+1,name='trade cnt',mode='lines+markers',marker=dict(symbol='diamond'),line=dict(color='green')),row=3,col=1,secondary_y=False)



fig.update_xaxes(title_text="Time", row=1, col=1)  # 共享 X 轴
fig.update_xaxes(title_text="Time", row=2, col=1)  # 共享 X 轴
fig.update_xaxes(title_text="Time", row=3, col=1)  # 共享 X 轴
# fig.update_xaxes(title_text="Timestamp", tickformat="%Y-%m-%d %H:%M",row=2, col=1)  # 共享 X 轴


fig.update_yaxes(title_text="Balance", row=1, col=1)
fig.update_yaxes(title_text="Price", row=2, col=1, secondary_y=False)
fig.update_yaxes(title_text="PNL", row=2, col=1, secondary_y=True)
fig.update_yaxes(title_text="trades_cnt", row=3, col=1, secondary_y=False)
fig.update_yaxes(title_text="win_ratio", row=3, col=1, secondary_y=True)

fig.update_layout(xaxis_rangeslider_visible=False)
fig.update_layout(
    height=700,
    width=1500,
    showlegend=True,
)

fig.update_xaxes(rangeslider_visible=False)


fig.show()
